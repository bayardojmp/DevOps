/*Creacion del archivo .dockerignore*/

Este se utiliza para excluir los archivos que deben ser ignorados al momento de hacer deploy.

/*Creacion del Dockerfile*/

Configuracion para ahcer deploy de nuestro package

*FROM  
Se utiliza para indicar desde donde queremos hacer referencia a nuestro paquete 

*EXPOSE
Comando para indicar en que puerto va a correr.

*WORKDIR
Indica el directorio desde donde va a correr la app.

*ADD 
Para añadir archivos desde la maquina local al package

-> ADD [directorio o archivos de la maquina local] [ruta del directorio a la maquina en la nube]

*RUN    
Se utiliza para correr comandos como lo hariamos desde una linea de comandos en la maquina local

*CMD 
Para ejecutar comandos 

-> CMD ["comando", "parametro o bandera"]

/*crear contenedor*/

*docker build -t [nombre o tag] [ubicacion del Dockerfile]

/*correr el package*/

*docker run -p[puerto de maquina local]:[puerto de maquina en la nube] [nombre o tag del package]

*docker run -d -p[puerto de maquina local]:[puerto de maquina en la nube] [nombre o tag del package]


*docker ps 
Muestra los procesos de los contenedores que tengamos corriendo

*docker kill [id del package]
Sirve para detener un package que se encuentra ejecutando.

*docker run [package] [comando a ejecutar]
Funciona para ejecutar comandos especificos dentro del package sin tener que modificar el Dockerfile

/*Continuos Integration*/

Se trata de pruebas automatizadas luego de realizar un cambio en el codigo y verifica si el codigo es estable 
o no.

/*Circle CI*/

 circleci.yml

machine:
 services:
  - docker

 dependencies:
  override:
    - docker build -t prueba .
 test:
  override:
    - docker run prueba npm test

/*Continuous Delivery*/
¿Qué es Continuous Delivery?

Cuando incluimos CI en nuestro proceso, nos aseguramos que nuestro código siempre esté bien 
probado y sea posible enviarlo a producción con pocas preocupaciones. 
Este estado es la definición de Continuous Delivery. El código no necesariamente tiene que terminar 
en producción, pero el hecho de que podamos deploy con confianza basado en nuestro proceso de CI, 
nos pone en una posición muy cómoda. En el caso que veamos un problema en producción, 
podemos escoger una versión anterior con certeza de que no traerá problemas.

Lanzar el código directo a producción después que los cambios fueron aceptados por el proceso de CI
 es conocido como Continuous Deployment. Para llegar a este nivel, los niveles de prueba deben 
 ser excelentes. Tener un ambiente de QA con pruebas de aceptación sería crucial para prevenir 
 errores en las partes más críticas del servicio.


Creando Nuestro Ambiente de Control de Calidad (Quality Assurance) con Now.sh 
/*now -L*/
Agregar nuestras credenciales de Now

/*npm i -g --unsafe-perm now*/
Instalar now.sh como variable global de nuestro proyecto 

/*now --docker*/
Hacer deploy de nuestro package de docker hacia now.sh

/*Conectando los deploy de now con circleci*/

1. Ingresar a nuestro perfil de now.sh
2. Crear un API token con el nombre de nestro repositorio de circleci (el mismo nombre del repositorio e github)
3. En circleci agregar en token el la opcion de Environment Variables 
4. modificar el archivo circle.yml agregando la instalacion de node para que con esto ejecutar
el comando que instalar now.sh

machine:
 node:
  version: 8.9.4 

5. Agregando la opcion de Deployment en el archivo circle.yml

deployment:
  qa:
    branch: /feature_.*/  --> indicamos que tipo de brach (rama) queremos que tome en cuenta al hacer deploy
    commands: 
      sh deployments/qa.sh --> Indicando el comando o script a ejecutar, en este caso es un script del cual se indica la ubicacion exacta

qa.sh
    npm install -g now
    echo "deployin..."
    URL=$(now --docker $NOW_TOKEN)
    echo "corriendo prueba de aceptacion en $URL"
    curl --silent -L $URL